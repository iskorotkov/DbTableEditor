<button @onclick="Show" @attributes="@AdditionalAttributes" type="button">
    @ButtonText
</button>

@if (_isShown)
{
    <div class="fade modal show" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class=modal-content>
                <div class=modal-header>
                    <h5 class=modal-title>@DialogTitle</h5>
                </div>
                <div class=modal-body>
                    @ChildContent
                </div>
                <div class=modal-footer>
                    <button @onclick="Cancel" class="btn btn-secondary" data-dismiss=modal type="reset">Close</button>
                    <button @onclick="Submit" class="btn btn-primary" type="submit">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Button";

    [Parameter]
    public string DialogTitle { get; set; } = "Dialog";

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public bool CloseOnCancel { get; set; } = true;

    private bool _isShown;

    public async Task Show()
    {
        _isShown = true;
        StateHasChanged();

        if (OnOpen.HasDelegate)
        {
            await OnOpen.InvokeAsync(null);
        }
    }

    public async Task Hide()
    {
        _isShown = false;
        StateHasChanged();

        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync(null);
        }
    }

    private async Task Submit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(null);
        }
    }

    private async Task Cancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync(null);
        }

        if (CloseOnCancel)
        {
            await Hide();
        }
    }

}
