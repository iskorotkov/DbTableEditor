@page "/register"
@page "/register/{ReturnUrl}"
@inject HttpClient HttpClient
@inject ILoginService LoginService
@inject NavigationManager NavManager

<h3>Register</h3>

<EditForm Model="@_userInfo" OnValidSubmit="@CreateUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@_userInfo.Email" />
            <ValidationMessage For="@(() => _userInfo.Email)" />
        </div>
    </div>

    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@_userInfo.Password" />
            <ValidationMessage For="@(() => _userInfo.Password)" />
        </div>
    </div>

    <div class="form-group">
        <label>Role:</label>
        <div>
            <InputSelect @bind-Value="_userInfo.Role">
                @foreach (var role in _roles)
                {
                    <option value="@role">@role</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _userInfo.Role)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (_errorMessage != null)
{
    <div class="alert-warning p-2 m-2">@_errorMessage</div>
}

@code {
    private readonly UserCredentials _userInfo = new UserCredentials();
    private readonly List<string> _roles = new List<string> { "Editor", "Admin" };

    [Parameter]
    public string ReturnUrl { get; set; }

    private string _errorMessage;

    public Register()
    {
        _userInfo.Role = _roles[0];
    }

    private async Task CreateUser()
    {
        UserToken result;
        try
        {
            result = await HttpClient.PostJsonAsync<UserToken>("api/accounts/register", _userInfo);
        }
        catch (HttpRequestException e)
        {
            _errorMessage = "Registration failed. Username or password is invalid.";
            return;
        }

        if (string.IsNullOrWhiteSpace(ReturnUrl))
        {
            await LoginService.Login(result.Token);
            NavManager.NavigateTo("/");
        }
        else
        {
            NavManager.NavigateTo(ReturnUrl);
        }

        _errorMessage = null;
    }
}
