@page "/empires"
@using DbTableEditor.BlazorApp.Services.Saving
@inject HttpClient Http
@inject ISaveOnCloseService SaveOnClose

<h3>Empires</h3>

@if (Empires == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column">@column</th>
                }
            </tr>

            <tr>
                <td>
                    <button type="button" class="btn btn-secondary" @onclick="@ClearFilters">Clear</button>
                </td>
                <td>
                    <input type="text" @bind="@_nameFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_powerFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_rulerFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_governmentFilter" @bind:event="oninput"/>
                </td>
            </tr>
        </thead>
        <tbody>
            @{
                var items = Empires
                    .Select(x => new
                    {
                        x.Empire,
                        x.IsInAlliance,
                        Government = GovernmentTypes.Find(t => t.Id == x.Empire.GovernmentTypeId)?.Name
                    })
                    .Where(x => x.Empire.Name?.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(x => x.Empire.Power.ToString().Contains(_powerFilter, StringComparison.OrdinalIgnoreCase))
                    .Where(x => x.Empire.Ruler?.Contains(_rulerFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(x => x.Government?.Contains(_governmentFilter, StringComparison.OrdinalIgnoreCase) ?? true);

                @foreach (var item in items)
                {
                    var empire = item.Empire;
                    var isInAlliance = item.IsInAlliance;

                    <AuthorizeView Roles="Admin, Editor">
                        <Authorized>
                            <TableRow Model="@empire" ValidSubmit="@SubmitChanges" FocusIn="@UpdateSelected">
                                <DataAnnotationsValidator/>

                                <td>
                                    @if (isInAlliance)
                                    {
                                        <span>Empire can't be deleted.</span>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-danger" @onclick="@(() => Remove(empire))">
                                            Remove
                                        </button>
                                    }
                                </td>

                                <TextCell @bind-Value="@empire.Name">
                                    @if (DuplicatedName.Contains(empire))
                                    {
                                        <div class="validation-message">Name must be distinct.</div>
                                    }
                                </TextCell>

                                <NumberCell @bind-Value="@empire.Power"/>
                                <TextCell @bind-Value="@empire.Ruler"/>

                                <SelectItemCell @bind-Value="@empire.GovernmentTypeId" Elements="@GovernmentTypes"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"/>
                            </TableRow>
                        </Authorized>

                        <NotAuthorized>
                            <tr>
                                <td></td>
                                <td>@empire.Name</td>
                                <td>@empire.Power</td>
                                <td>@empire.Ruler</td>
                                <td>@item.Government</td>
                            </tr>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            }
        </tbody>
    </table>

    <AuthorizeView Roles="Admin, Editor">
        <Authorized>
            <button class="btn btn-outline-success" @onclick="@Create">
                Create
            </button>
        </Authorized>

        <NotAuthorized></NotAuthorized>
    </AuthorizeView>

    <BackButton/>
}

@code {
    private List<EmpireInAlliance> Empires { get; set; }
    private List<GovernmentType> GovernmentTypes { get; set; }

    private HashSet<Empire> DuplicatedName { get; set; } = new HashSet<Empire>();

    private string _nameFilter = "";
    private string _powerFilter = "";
    private string _rulerFilter = "";
    private string _governmentFilter = "";

    private void ClearFilters()
    {
        _nameFilter = "";
        _powerFilter = "";
        _rulerFilter = "";
        _governmentFilter = "";
    }

    private List<string> Columns { get; set; } = new List<string>
    {
        "", "Name", "Power",
        "Ruler", "Government Type"
    };

    protected override async Task OnInitializedAsync()
    {
        await InitGovernmentTypes();
        await InitEmpires();

        SaveOnClose.PageClosing += async (ctx) => await SubmitChanges(ctx);
        await SaveOnClose.EnablePreventClosing();
    }

    private async Task InitGovernmentTypes()
    {
        var result = await Http.GetJsonAsync<IEnumerable<GovernmentType>>("api/governmenttypes")
            .ConfigureAwait(false);
        GovernmentTypes = result.OrderBy(t => t.Id)
            .ToList();
    }

    private async Task InitEmpires()
    {
        var result = await Http.GetJsonAsync<IEnumerable<EmpireInAlliance>>("api/empires/inalliance")
            .ConfigureAwait(false);
        Empires = result
            .OrderBy(e => e.Empire.Id)
            .ToList();
    }

    private void Create()
    {
        var empire = new Empire();
        Empires.Add(new EmpireInAlliance(empire, false));
        StateHasChanged();
    }

    private async Task Remove(Empire empire)
    {
        Empires.RemoveAll(e => e.Empire == empire);
        if (DuplicatedName.Contains(empire))
        {
            DuplicatedName.Remove(empire);
        }

        if (empire.Id != 0)
        {
            await Http.DeleteAsync($"api/empires/{empire.Id}")
                .ConfigureAwait(false);
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        if (!ctx.IsModified())
        {
            return;
        }

        var empire = (Empire) ctx.Model;
        if (Empires.Exists(s => s.Empire.Id != empire.Id && s.Empire.Name == empire.Name))
        {
            DuplicatedName.Add(empire);
            return;
        }

        if (DuplicatedName.Contains(empire))
        {
            DuplicatedName.Remove(empire);
        }

        if (empire.Id == 0)
        {
            var created = await Http.PostJsonAsync<Empire>("api/empires", empire);
            empire.Id = created.Id;
        }
        else
        {
            await Http.PutJsonAsync($"api/empires/{empire.Id}", empire);
        }
        ctx.MarkAsUnmodified();
    }

    private void UpdateSelected(EditContext ctx)
    {
        SaveOnClose.EditContext = ctx;
    }

}
