@page "/fleets"
@using DbTableEditor.BlazorApp.Services.Saving
@inject HttpClient Http
@inject ISaveOnCloseService SaveOnClose

<h3>Fleets</h3>

@if (Fleets == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column">@column</th>
                }
            </tr>

            <tr>
                <td>
                    <button type="button" class="btn btn-secondary" @onclick="@ClearFilters">Clear</button>
                </td>
                <td>
                    <input type="text" @bind="@_nameFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_commanderFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_statusFilter" @bind:event="oninput"/>
                </td>
            </tr>
        </thead>
        <tbody>

            @{
                var items = Fleets
                    .Select(x => new
                    {
                        x.Fleet,
                        x.HasShips,
                        Commander = Commanders.Find(c => c.Id == x.Fleet.CommanderId)?.Name,
                        Status = Statuses.Find(s => s.Id == x.Fleet.StatusId)?.Name
                    })
                    .Where(x => x.Fleet.Name?.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(x => x.Status?.Contains(_statusFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(x => x.Commander?.Contains(_commanderFilter, StringComparison.OrdinalIgnoreCase) ?? true);

                @foreach (var item in items)
                {
                    var fleet = item.Fleet;

                    <AuthorizeView Roles="Admin, Editor">
                        <Authorized>
                            <TableRow Model="@fleet" ValidSubmit="@SubmitChanges" FocusIn="@UpdateSelected">
                                <DataAnnotationsValidator/>

                                <td>
                                    @if (item.HasShips)
                                    {
                                        <span>Fleet can't be deleted.</span>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-danger" @onclick="@(() => Remove(fleet))">
                                            Remove
                                        </button>
                                    }
                                </td>

                                <TextCell @bind-Value="@fleet.Name">
                                    @if (DuplicatedName.Contains(fleet))
                                    {
                                        <div class="validation-message">Name must be distinct.</div>
                                    }
                                </TextCell>

                                <SelectItemCell @bind-Value="@fleet.CommanderId" Elements="@Commanders"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)">
                                    @if (DuplicatedCommander.Contains(fleet))
                                    {
                                        <div class="validation-message">Commander must be distinct.</div>
                                    }
                                </SelectItemCell>

                                <SelectItemCell @bind-Value="@fleet.StatusId" Elements="@Statuses"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"/>
                            </TableRow>
                        </Authorized>

                        <NotAuthorized>
                            <tr>
                                <td></td>
                                <td>@fleet.Name</td>
                                <td>@item.Commander</td>
                                <td>@item.Status</td>
                            </tr>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            }
        </tbody>
    </table>

    <AuthorizeView Roles="Admin, Editor">
        <Authorized>
            <button class="btn btn-outline-success" @onclick="@Create">
                Create
            </button>
        </Authorized>

        <NotAuthorized></NotAuthorized>
    </AuthorizeView>

    <BackButton/>
}

@code {
    private List<FleetOperational> Fleets { get; set; }
    private List<Commander> Commanders { get; set; }
    private List<Status> Statuses { get; set; }

    private HashSet<Fleet> DuplicatedName { get; set; } = new HashSet<Fleet>();
    private HashSet<Fleet> DuplicatedCommander { get; set; } = new HashSet<Fleet>();

    private List<string> Columns { get; set; } = new List<string>
    { "", "Name", "Commander", "Status" };

    private string _nameFilter = "";
    private string _commanderFilter = "";
    private string _statusFilter = "";

    private void ClearFilters()
    {
        _nameFilter = "";
        _commanderFilter = "";
        _statusFilter = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await InitStatuses();
        await InitCommanders();
        await InitFleets();

        SaveOnClose.PageClosing += async (ctx) => await SubmitChanges(ctx);
        await SaveOnClose.EnablePreventClosing();
    }

    private async Task InitFleets()
    {
        var result = await Http.GetJsonAsync<IEnumerable<FleetOperational>>("api/fleets/operational")
            .ConfigureAwait(false);
        Fleets = result.OrderBy(f => f.Fleet.Id)
            .ToList();
    }

    private async Task InitStatuses()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Status>>("api/statuses")
            .ConfigureAwait(false);
        Statuses = result.OrderBy(s => s.Id)
            .ToList();
    }

    private async Task InitCommanders()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Commander>>("api/commanders")
            .ConfigureAwait(false);
        Commanders = result
            .OrderBy(s => s.Id)
            .ToList();
    }

    private void Create()
    {
        var fleet = new Fleet();
        Fleets.Add(new FleetOperational(fleet, false));
        StateHasChanged();
    }

    private async Task Remove(Fleet fleet)
    {
        Fleets.RemoveAll(f => f.Fleet == fleet);
        if (DuplicatedName.Contains(fleet))
        {
            DuplicatedName.Remove(fleet);
        }
        if (DuplicatedCommander.Contains(fleet))
        {
            DuplicatedCommander.Remove(fleet);
        }

        if (fleet.Id != 0)
        {
            await Http.DeleteAsync($"api/fleets/{fleet.Id}")
                .ConfigureAwait(false);
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        if (!ctx.IsModified())
        {
            return;
        }

        var fleet = (Fleet) ctx.Model;
        var duplicated = false;
        if (Fleets.Exists(f => f.Fleet.Id != fleet.Id && f.Fleet.Name == fleet.Name))
        {
            DuplicatedName.Add(fleet);
            duplicated = true;
        }
        else if (DuplicatedName.Contains(fleet))
        {
            DuplicatedName.Remove(fleet);
        }

        if (Fleets.Exists(f => f.Fleet.Id != fleet.Id && f.Fleet.CommanderId == fleet.CommanderId))
        {
            DuplicatedCommander.Add(fleet);
            duplicated = true;
        }
        else if (DuplicatedCommander.Contains(fleet))
        {
            DuplicatedCommander.Remove(fleet);
        }

        if (duplicated)
        {
            return;
        }

        if (fleet.Id == 0)
        {
            var created = await Http.PostJsonAsync<Fleet>("api/fleets", fleet);
            fleet.Id = created.Id;
        }
        else
        {
            await Http.PutJsonAsync($"api/fleets/{fleet.Id}", fleet);
        }
        ctx.MarkAsUnmodified();
    }

    private void UpdateSelected(EditContext ctx)
    {
        SaveOnClose.EditContext = ctx;
    }

}
