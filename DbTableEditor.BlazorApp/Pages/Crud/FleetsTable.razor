@page "/fleets"
@using DbTableEditor.BlazorApp.Services.Saving
@inject HttpClient Http
@inject SaveOnCloseService SaveOnClose

<h3>Fleets</h3>

@if (Fleets == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column">@column</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var (fleet, hasShips) in Fleets)
            {
                var f = fleet;
                
                <AuthorizeView Roles="Admin, Editor">
                    <Authorized>
                        <TableRow Model="@f" ValidSubmit="@SubmitChanges" FocusIn="@UpdateSelected">
                            <DataAnnotationsValidator/>

                            <td>
                                @if (hasShips)
                                {
                                    <span>Fleet can't be deleted.</span>
                                }
                                else
                                {
                                    <button class="btn btn-link" @onclick="@(() => Remove(f))">
                                        Remove
                                    </button>
                                }
                            </td>

                            <TextCell @bind-Value="@f.Name">
                                @if (DuplicatedName.Contains(f))
                                {
                                    <div class="validation-message">Name must be distinct.</div>
                                }
                            </TextCell>

                            <SelectItemCell @bind-Value="@f.CommanderId" Elements="@Commanders"
                                             IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)">
                                @if (DuplicatedCommander.Contains(f))
                                {
                                    <div class="validation-message">Commander must be distinct.</div>
                                }
                            </SelectItemCell>

                            <SelectItemCell @bind-Value="@f.StatusId" Elements="@Statuses"
                                             IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"/>
                        </TableRow>
                    </Authorized>
                    
                    <NotAuthorized>
                        <tr>
                            <td></td>
                            <td>@fleet.Name</td>
                            <td>@Commanders.Find(c => c.Id == fleet.CommanderId).Name</td>
                            <td>@Statuses.Find(s => s.Id == fleet.StatusId).Name</td>
                        </tr>
                    </NotAuthorized>
                </AuthorizeView>
            }
            
            <AuthorizeView Roles="Admin, Editor">
                <Authorized>
                    <tr>
                        <td>
                            <button class="btn btn-link" @onclick="@Create">
                                Create
                            </button>
                        </td>
                    </tr>
                </Authorized>
                
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </tbody>
    </table>
}

@code {
    private List<FleetOperational> Fleets { get; set; }
    private List<Commander> Commanders { get; set; }
    private List<Status> Statuses { get; set; }

    private HashSet<Fleet> DuplicatedName { get; set; } = new HashSet<Fleet>();
    private HashSet<Fleet> DuplicatedCommander { get; set; } = new HashSet<Fleet>();

    private List<string> Columns { get; set; } = new List<string>
    { "", "Name", "Commander", "Status" };

    protected override async Task OnInitializedAsync()
    {
        await InitStatuses();
        await InitCommanders();
        await InitFleets();

        SaveOnClose.PageClosing += async (ctx) => await SubmitChanges(ctx);
        await SaveOnClose.EnablePreventClosing();
    }

    private async Task InitFleets()
    {
        var result = await Http.GetJsonAsync<IEnumerable<FleetOperational>>("api/fleets/operational")
            .ConfigureAwait(false);
        Fleets = result.OrderBy(f => f.Fleet.Id)
            .ToList();
    }

    private async Task InitStatuses()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Status>>("api/statuses")
            .ConfigureAwait(false);
        Statuses = result.OrderBy(s => s.Id)
            .ToList();
    }

    private async Task InitCommanders()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Commander>>("api/commanders")
            .ConfigureAwait(false);
        Commanders = result
            .OrderBy(s => s.Id)
            .ToList();
    }

    private void Create()
    {
        var fleet = new Fleet();
        Fleets.Add(new FleetOperational(fleet, false));
        StateHasChanged();
    }

    private async Task Remove(Fleet fleet)
    {
        Fleets.RemoveAll(f => f.Fleet == fleet);
        if (DuplicatedName.Contains(fleet))
        {
            DuplicatedName.Remove(fleet);
        }
        if (DuplicatedCommander.Contains(fleet))
        {
            DuplicatedCommander.Remove(fleet);
        }

        if (fleet.Id != 0)
        {
            await Http.DeleteAsync($"api/fleets/{fleet.Id}")
                .ConfigureAwait(false);
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        if (!ctx.IsModified())
        {
            return;
        }

        var fleet = (Fleet) ctx.Model;
        var duplicated = false;
        if (Fleets.Exists(f => f.Fleet.Id != fleet.Id && f.Fleet.Name == fleet.Name))
        {
            DuplicatedName.Add(fleet);
            duplicated = true;
        }
        else if (DuplicatedName.Contains(fleet))
        {
            DuplicatedName.Remove(fleet);
        }

        if (Fleets.Exists(f => f.Fleet.Id != fleet.Id && f.Fleet.CommanderId == fleet.CommanderId))
        {
            DuplicatedCommander.Add(fleet);
            duplicated = true;
        }
        else if (DuplicatedCommander.Contains(fleet))
        {
            DuplicatedCommander.Remove(fleet);
        }

        if (duplicated)
        {
            return;
        }

        if (fleet.Id == 0)
        {
            var created = await Http.PostJsonAsync<Fleet>("api/fleets", fleet);
            fleet.Id = created.Id;
        }
        else
        {
            await Http.PutJsonAsync($"api/fleets/{fleet.Id}", fleet);
        }
        ctx.MarkAsUnmodified();
    }

    private void UpdateSelected(EditContext ctx)
    {
        SaveOnClose.EditContext = ctx;
    }

}
