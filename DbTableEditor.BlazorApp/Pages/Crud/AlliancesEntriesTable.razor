@page "/alliancesentries"
@using DbTableEditor.BlazorApp.Services.Saving
@inject HttpClient Http
@inject ISaveOnCloseService SaveOnClose

<h3>Alliances Entries</h3>

@if (Entries == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column">@column</th>
                }
            </tr>

            <tr>
                <td>
                    <button class="btn btn-secondary" type="button" @onclick="@ClearFilters">Clear</button>
                </td>
                <td>
                    <input type="text" @bind="@_allianceNameFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_empireNameFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_yearFilter" @bind:event="oninput"/>
                </td>
            </tr>
        </thead>
        <tbody>
            @{
                var items = Entries
                    .Select(entry => new
                    {
                        Entry = entry,
                        Alliance = Alliances.Find(a => a.Id == entry.AllianceId)?.Name,
                        Empire = Empires.Find(e => e.Id == entry.EmpireId)?.Name
                    })
                    .Where(e => e.Alliance?.Contains(_allianceNameFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(e => e.Empire?.Contains(_empireNameFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                    .Where(e => e.Entry.EntryYear.ToString().Contains(_yearFilter, StringComparison.OrdinalIgnoreCase));

                @foreach (var item in items)
                {
                    var entry = item.Entry;
                    var alliance = item.Alliance;
                    var empire = item.Empire;

                    <AuthorizeView Roles="Admin, Editor">
                        <Authorized>
                            <TableRow Model="@entry" ValidSubmit="@SubmitChanges" FocusIn="@UpdateSelected">
                                <DataAnnotationsValidator/>

                                <td>
                                    <button class="btn btn-outline-danger" @onclick="@(() => Remove(entry))">
                                        Remove
                                    </button>
                                </td>

                                <SelectItemCell @bind-Value="@entry.AllianceId" Elements="@Alliances"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"
                                                 CreateAddress="/alliances">
                                    @if (DuplicatedName.Contains(entry))
                                    {
                                        <div class="validation-message">Alliance-Empire pair must be unique.</div>
                                    }
                                </SelectItemCell>

                                <SelectItemCell @bind-Value="@entry.EmpireId" Elements="@Empires"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"
                                                 CreateAddress="/empires">
                                    @if (DuplicatedName.Contains(entry))
                                    {
                                        <div class="validation-message">Alliance-Empire pair must be unique.</div>
                                    }
                                </SelectItemCell>

                                <NumberCell @bind-Value="@entry.EntryYear"/>
                            </TableRow>
                        </Authorized>

                        <NotAuthorized>
                            <tr>
                                <td></td>
                                <td>@alliance</td>
                                <td>@empire</td>
                                <td>@entry.EntryYear</td>
                            </tr>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            }
        </tbody>
    </table>

    <AuthorizeView Roles="Admin, Editor">
        <Authorized>
            <button class="btn btn-outline-success" @onclick="@Create">
                Create
            </button>
        </Authorized>

        <NotAuthorized></NotAuthorized>
    </AuthorizeView>
}

@code
{
    private List<AlliancesEntry> Entries { get; set; }
    private List<Alliance> Alliances { get; set; }
    private List<Empire> Empires { get; set; }

    private HashSet<AlliancesEntry> DuplicatedName { get; } = new HashSet<AlliancesEntry>();

    private List<string> Columns { get; } = new List<string> { "", "Alliance", "Empire", "Entry Year" };

    private string _allianceNameFilter = "";
    private string _empireNameFilter = "";
    private string _yearFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await InitAlliances();
        await InitEmpires();
        await InitEntries();

        SaveOnClose.PageClosing += async ctx => await SubmitChanges(ctx);
        await SaveOnClose.EnablePreventClosing();
    }

    private async Task InitAlliances()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Alliance>>("api/alliances")
            .ConfigureAwait(false);
        Alliances = result
            .OrderBy(e => e.Id)
            .ToList();
    }

    private async Task InitEmpires()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Empire>>("api/empires")
            .ConfigureAwait(false);
        Empires = result
            .OrderBy(e => e.Id)
            .ToList();
    }

    private async Task InitEntries()
    {
        var result = await Http.GetJsonAsync<IEnumerable<AlliancesEntry>>("api/alliancesentries")
            .ConfigureAwait(false);
        Entries = result
            .OrderBy(e => e.Id)
            .ToList();
    }

    private void Create()
    {
        var entry = new AlliancesEntry();
        Entries.Add(entry);
        StateHasChanged();
    }

    private async Task Remove(AlliancesEntry entry)
    {
        Entries.Remove(entry);
        if (DuplicatedName.Contains(entry))
        {
            DuplicatedName.Remove(entry);
        }

        if (entry.Id != 0)
        {
            await Http.DeleteAsync($"api/alliancesentries/{entry.Id}")
                .ConfigureAwait(false);
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        if (!ctx.IsModified())
        {
            return;
        }

        var entry = (AlliancesEntry) ctx.Model;
        if (Entries.Exists(s =>
            s.Id != entry.Id
            && s.EmpireId == entry.EmpireId
            && s.AllianceId == entry.AllianceId))
        {
            DuplicatedName.Add(entry);
            return;
        }

        if (DuplicatedName.Contains(entry))
        {
            DuplicatedName.Remove(entry);
        }

        if (entry.Id == 0)
        {
            var created = await Http.PostJsonAsync<AlliancesEntry>("api/alliancesentries", entry);
            entry.Id = created.Id;
        }
        else
        {
            await Http.PutJsonAsync($"api/alliancesentries/{entry.Id}", entry);
        }
        ctx.MarkAsUnmodified();
    }

    private void UpdateSelected(EditContext ctx)
    {
        SaveOnClose.EditContext = ctx;
    }

    private void ClearFilters()
    {
        _allianceNameFilter = "";
        _empireNameFilter = "";
        _yearFilter = "";
    }
}
