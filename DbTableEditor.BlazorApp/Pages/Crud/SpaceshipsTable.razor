@page "/spaceships"
@using DbTableEditor.BlazorApp.Services.Saving
@inject HttpClient Http
@inject ISaveOnCloseService SaveOnClose

<h3>Spaceships</h3>

@if (Spaceships == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column">@column</th>
                }
            </tr>

            <tr>
                <td>
                    <button type="button" class="btn btn-secondary" @onclick="@ClearFilters">Clear</button>
                </td>

                <td>
                    <input type="text" @bind="@_nameFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_capacityFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_energyFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_firepowerFilter" @bind:event="oninput"/>
                </td>

                <td>
                    <input type="text" @bind="@_fuelFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_hullFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_speedFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_staffFilter" @bind:event="oninput"/>
                </td>

                <td>
                    <input type="text" @bind="@_weightFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_fleetFilter" @bind:event="oninput"/>
                </td>
                <td>
                    <input type="text" @bind="@_shipyardFilter" @bind:event="oninput"/>
                </td>
            </tr>
        </thead>
        <tbody>
            @{
                var items = Spaceships
                    .Select(ship => new
                    {
                        Spaceship = ship,
                        Fleet = Fleets.Find(x => x.Id == ship.FleetId)?.Name,
                        Shipyard = Shipyards.Find(x => x.Id == ship.ShipyardId)?.Name
                    })
                    .Where(x => (x.Spaceship.Name?.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                                && x.Spaceship.Capacity.ToString().Contains(_capacityFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Energy.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Firepower.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Fuel.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Hull.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Speed.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Staff.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && x.Spaceship.Weight.ToString().Contains(_nameFilter, StringComparison.OrdinalIgnoreCase)
                                && (x.Fleet?.Contains(_fleetFilter, StringComparison.OrdinalIgnoreCase) ?? true)
                                && (x.Shipyard?.Contains(_shipyardFilter, StringComparison.OrdinalIgnoreCase) ?? true));

                @foreach (var item in items)
                {
                    var s = item.Spaceship;

                    <AuthorizeView Roles="Admin, Editor">
                        <Authorized>
                            <TableRow Model="@s" ValidSubmit="@SubmitChanges" FocusIn="@UpdateSelected">
                                <DataAnnotationsValidator/>

                                <td>
                                    <button class="btn btn-outline-danger" @onclick="@(() => Remove(s))">
                                        Remove
                                    </button>
                                </td>

                                <TextCell @bind-Value="@s.Name">
                                    @if (DuplicatedName.Contains(s))
                                    {
                                        <div class="validation-message">Name must be distinct.</div>
                                    }
                                </TextCell>

                                <NumberCell @bind-Value="@s.Capacity"/>
                                <NumberCell @bind-Value="@s.Energy"/>
                                <NumberCell @bind-Value="@s.Firepower"/>
                                <NumberCell @bind-Value="@s.Fuel"/>
                                <NumberCell @bind-Value="@s.Hull"/>
                                <NumberCell @bind-Value="@s.Speed"/>
                                <NumberCell @bind-Value="@s.Staff"/>
                                <NumberCell @bind-Value="@s.Weight"/>

                                <SelectItemCell @bind-Value="@s.FleetId" Elements="@Fleets"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"
                                                 CreateAddress="/fleets"/>

                                <SelectItemCell @bind-Value="@s.ShipyardId" Elements="@Shipyards"
                                                 IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)"/>
                            </TableRow>
                        </Authorized>

                        <NotAuthorized>
                            <tr>
                                <td>@s.Name</td>
                                <td>@s.Capacity</td>
                                <td>@s.Energy</td>
                                <td>@s.Firepower</td>
                                <td>@s.Fuel</td>
                                <td>@s.Hull</td>
                                <td>@s.Speed</td>
                                <td>@s.Staff</td>
                                <td>@s.Weight</td>
                                <td>@item.Fleet</td>
                                <td>@item.Shipyard</td>
                            </tr>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            }
        </tbody>
    </table>

    <AuthorizeView Roles="Admin, Editor">
        <Authorized>
            <button class="btn btn-outline-success" @onclick="@Create">
                Create
            </button>
        </Authorized>

        <NotAuthorized></NotAuthorized>
    </AuthorizeView>
}

@code
{
    private List<Spaceship> Spaceships { get; set; }
    private List<Fleet> Fleets { get; set; }
    private List<Shipyard> Shipyards { get; set; }

    private HashSet<Spaceship> DuplicatedName { get; set; } = new HashSet<Spaceship>();

    private List<string> Columns { get; set; } = new List<string>
    {
        "", "Name", "Capacity",
        "Energy", "Firepower", "Fuel", "Hull", "Speed", "Staff", "Weight", "Fleet", "Shipyard"
    };

    private string _nameFilter = "";
    private string _capacityFilter = "";
    private string _energyFilter = "";
    private string _firepowerFilter = "";

    private string _fuelFilter = "";
    private string _hullFilter = "";
    private string _speedFilter = "";
    private string _staffFilter = "";

    private string _weightFilter = "";
    private string _fleetFilter = "";
    private string _shipyardFilter = "";

    private void ClearFilters()
    {
        _nameFilter = "";
        _capacityFilter = "";
        _energyFilter = "";
        _firepowerFilter = "";

        _fuelFilter = "";
        _hullFilter = "";
        _speedFilter = "";
        _staffFilter = "";

        _weightFilter = "";
        _fleetFilter = "";
        _shipyardFilter = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await InitFleets();
        await InitShipyards();
        await InitSpaceships();

        SaveOnClose.PageClosing += async (ctx) => await SubmitChanges(ctx);
        await SaveOnClose.EnablePreventClosing();
    }

    private async Task InitFleets()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Fleet>>("api/fleets")
            .ConfigureAwait(false);
        Fleets = result.OrderBy(f => f.Id)
            .ToList();
    }

    private async Task InitShipyards()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Shipyard>>("api/shipyards")
            .ConfigureAwait(false);
        Shipyards = result.OrderBy(s => s.Id)
            .ToList();
    }

    private async Task InitSpaceships()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Spaceship>>("api/Spaceships")
            .ConfigureAwait(false);
        Spaceships = result
            .OrderBy(s => s.Id)
            .ToList();
    }

    private void Create()
    {
        var ship = new Spaceship();
        Spaceships.Add(ship);
        StateHasChanged();
    }

    private async Task Remove(Spaceship ship)
    {
        Spaceships.Remove(ship);
        if (DuplicatedName.Contains(ship))
        {
            DuplicatedName.Remove(ship);
        }

        if (ship.Id != 0)
        {
            await Http.DeleteAsync($"api/spaceships/{ship.Id}")
                .ConfigureAwait(false);
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        if (!ctx.IsModified())
        {
            return;
        }

        var ship = (Spaceship) ctx.Model;
        if (Spaceships.Exists(s => s.Id != ship.Id && s.Name == ship.Name))
        {
            DuplicatedName.Add(ship);
            return;
        }

        if (DuplicatedName.Contains(ship))
        {
            DuplicatedName.Remove(ship);
        }

        if (ship.Id == 0)
        {
            var created = await Http.PostJsonAsync<Spaceship>("api/spaceships", ship);
            ship.Id = created.Id;
        }
        else
        {
            await Http.PutJsonAsync($"api/spaceships/{ship.Id}", ship);
        }
        ctx.MarkAsUnmodified();
    }

    private void UpdateSelected(EditContext ctx)
    {
        SaveOnClose.EditContext = ctx;
    }
}
