@page "/spaceships"

<EditTable>
    <Header>Spaceships</Header>
    <Row>
        @*<TextCell @bind-Value="@s.Name">
                @if (DuplicatedName.Contains(s))
                {
                    <div class="validation-message">Name must be distinct.</div>
                }
            </TextCell>

            <NumberCell @bind-Value="@s.Capacity" />
            <NumberCell @bind-Value="@s.Energy" />
            <NumberCell @bind-Value="@s.Firepower" />
            <NumberCell @bind-Value="@s.Fuel" />
            <NumberCell @bind-Value="@s.Hull" />
            <NumberCell @bind-Value="@s.Speed" />
            <NumberCell @bind-Value="@s.Staff" />
            <NumberCell @bind-Value="@s.Weight" />

            <SelectItemCell @bind-Value="@s.FleetId" Elements="@Fleets"
                            IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)" />

            <SelectItemCell @bind-Value="@s.ShipyardId" Elements="@Shipyards"
                            IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)" />*@
    </Row>
</EditTable>

@code {
    // private List<Spaceship> Spaceships { get; set; }
    private List<Fleet> Fleets { get; set; }
    private List<Shipyard> Shipyards { get; set; }
    //
    // private HashSet<Spaceship> DuplicatedName { get; set; } = new HashSet<Spaceship>();
    //
    // private List<string> Columns { get; set; } = new List<string>
    // {
    //     "", "Name", "Capacity",
    //     "Energy", "Firepower", "Fuel", "Hull", "Speed", "Staff", "Weight", "Fleet", "Shipyard"
    // };
    //
    // protected override async Task OnInitializedAsync()
    // {
    //     await InitFleets();
    //     await InitShipyards();
    //     await InitSpaceships();
    //
    //     SaveOnClose.PageClosing += async (ctx) => await SubmitChanges(ctx);
    //     await SaveOnClose.EnablePreventClosing();
    // }
    //
    // private async Task InitFleets()
    // {
    //     var result = await Http.GetJsonAsync<IEnumerable<Fleet>>("api/fleets")
    //         .ConfigureAwait(false);
    //     Fleets = result.OrderBy(f => f.Id)
    //         .ToList();
    // }
    //
    // private async Task InitShipyards()
    // {
    //     var result = await Http.GetJsonAsync<IEnumerable<Shipyard>>("api/shipyards")
    //         .ConfigureAwait(false);
    //     Shipyards = result.OrderBy(s => s.Id)
    //         .ToList();
    // }
    //
    // private async Task InitSpaceships()
    // {
    //     var result = await Http.GetJsonAsync<IEnumerable<Spaceship>>("api/Spaceships")
    //         .ConfigureAwait(false);
    //     Spaceships = result
    //         .OrderBy(s => s.Id)
    //         .ToList();
    // }
    //
    // private void Create()
    // {
    //     var ship = new Spaceship();
    //     Spaceships.Add(ship);
    //     StateHasChanged();
    // }
    //
    // private async Task Remove(Spaceship ship)
    // {
    //     Spaceships.Remove(ship);
    //     if (DuplicatedName.Contains(ship))
    //     {
    //         DuplicatedName.Remove(ship);
    //     }
    //
    //     if (ship.Id != 0)
    //     {
    //         await Http.DeleteAsync($"api/spaceships/{ship.Id}")
    //             .ConfigureAwait(false);
    //     }
    // }
    //
    // private async Task SubmitChanges(EditContext ctx)
    // {
    //     if (!ctx.IsModified())
    //     {
    //         return;
    //     }
    //
    //     var ship = (Spaceship)ctx.Model;
    //     if (Spaceships.Exists(s => s.Id != ship.Id && s.Name == ship.Name))
    //     {
    //         DuplicatedName.Add(ship);
    //         return;
    //     }
    //
    //     if (DuplicatedName.Contains(ship))
    //     {
    //         DuplicatedName.Remove(ship);
    //     }
    //
    //     if (ship.Id == 0)
    //     {
    //         var created = await Http.PostJsonAsync<Spaceship>("api/spaceships", ship);
    //         ship.Id = created.Id;
    //     }
    //     else
    //     {
    //         await Http.PutJsonAsync($"api/spaceships/{ship.Id}", ship);
    //     }
    //     ctx.MarkAsUnmodified();
    // }
    //
    // private void UpdateSelected(EditContext ctx)
    // {
    //     SaveOnClose.EditContext = ctx;
    // }
}
