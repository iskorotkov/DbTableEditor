@page "/fleets"
@inject HttpClient Http

<h3>Fleets Table</h3>

@if (Fleets == null)
{
    <span>Loading data...</span>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var column in Columns)
                {
                    <th @key="@column" class="divTableHead">@column</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var fleet in Fleets)
            {
                var f = fleet;
                <TableRow Model="@f" ValidSubmit="@SubmitChanges">
                    <DataAnnotationsValidator />

                    <td>
                        <button class="btn btn-link" @onclick="@(() => Remove(f))">
                            Remove
                        </button>
                    </td>

                    <TextCell @bind-Value="@f.Name">
                        @if (NotSaved.Contains(f))
                        {
                            <div class="validation-message">Name must be distinct.</div>
                        }
                    </TextCell>

                    <SelectItemCell @bind-Value="@f.CommanderId" Elements="@Commanders"
                                    IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)" />

                    <SelectItemCell @bind-Value="@f.StatusId" Elements="@Statuses"
                                    IndexFunc="@(e => e.Id)" LabelFunc="@(e => e.Name)" />
                </TableRow>
            }
            <tr>
                <td>
                    <button class="btn btn-block" @onclick="@Create">
                        Create
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private List<Fleet> Fleets { get; set; }
    private List<Commander> Commanders { get; set; }
    private List<Status> Statuses { get; set; }

    private HashSet<Fleet> NotSaved { get; set; } = new HashSet<Fleet>();

    private List<string> Columns { get; set; } = new List<string>
        { "", "Name", "Commander", "Status" };

    protected override async Task OnInitializedAsync()
    {
        await InitStatuses();
        await InitCommanders();
        await InitFleets();
    }

    private async Task InitFleets()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Fleet>>("api/fleets")
            .ConfigureAwait(false);
        Fleets = result.OrderBy(f => f.Id)
                       .ToList();
    }

    private async Task InitStatuses()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Status>>("api/statuses")
            .ConfigureAwait(false);
        Statuses = result.OrderBy(s => s.Id)
                          .ToList();
    }

    private async Task InitCommanders()
    {
        var result = await Http.GetJsonAsync<IEnumerable<Commander>>("api/commanders")
            .ConfigureAwait(false);
        Commanders = result
            .OrderBy(s => s.Id)
            .ToList();
    }

    private void Create()
    {
        var fleet = new Fleet();
        Fleets.Add(fleet);
        StateHasChanged();
    }

    private async Task Remove(Fleet fleet)
    {
        Fleets.Remove(fleet);
        if (NotSaved.Contains(fleet))
        {
            NotSaved.Remove(fleet);
        }

        if (fleet.Id != 0)
        {
            try
            {
                await Http.DeleteAsync($"api/fleets/{fleet.Id}")
                    .ConfigureAwait(false);
            }
            catch (HttpRequestException)
            {
                // Ignore
            }
        }
    }

    private async Task SubmitChanges(EditContext ctx)
    {
        var fleet = (Fleet)ctx.Model;
        if (NotSaved.Contains(fleet))
        {
            NotSaved.Remove(fleet);
        }

        if (!ctx.IsModified())
        {
            return;
        }
        try
        {
            if (fleet.Id == 0)
            {
                var created = await Http.PostJsonAsync<Fleet>("api/fleets", fleet);
                fleet.Id = created.Id;
            }
            else
            {
                await Http.PutJsonAsync($"api/fleets/{fleet.Id}", fleet);
            }
            ctx.MarkAsUnmodified();
        }
        catch (HttpRequestException)
        {
            NotSaved.Add(fleet);
        }
    }
}
